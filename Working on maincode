import random

dictionary = {"apple": "사과", "banana": "바나나", "lemon": "레몬", "grape": "포도"}

# 목숨 설정
lives = 3

def start_practice():
    keys = list(dictionary.keys())

    for _ in range(3):
        question = random.choice(keys)
        answer = dictionary[question]
        
        user_answer = input("{}의 뜻은? ".format(question))
        
        if user_answer == answer:
            print("정답입니다.")
            break
        else:
            if _ == 2:
                print("정답은 {}입니다.".format(answer))
            else:
                print("다시 입력해주세요.")

def show_rules():
    with open("rules.txt", "r") as file:
        rules = file.read()
        print(rules)

def add_word():
    word = input("추가할 단어를 입력하세요: ")
    meaning = input("단어의 뜻을 입력하세요: ")
    
    with open("dictionary.txt", "a") as file:
        file.write("{}:{}\n".format(word, meaning))
    
    print("단어가 추가되었습니다.")
    
   def delete_word():
    if word in dictionary:
        dictionary.remove(word)
        print(f"'{word}'이(가) 삭제되었습니다.")
   
# 단어장 리스트 생성
dictionary = {"apple": "사과", "banana": "바나나", "lemon": "레몬", "grape": "포도"}

# "banana" 단어 삭제
delete_word(dctionary, "banana")

# "grape" 단어 삭제
delete_word(dictionary, "grape")

# 삭제 후 단어장 출력
print(dictionary)

def show_dictionary():
    with open("dictionary.txt", "r") as file:
        for line in file:
            word, meaning = line.strip().split(":")
            print("{} - {}".format(word, meaning))

def change_settings():
    language = input("변경할 언어를 입력하세요: ")
    count = int(input("문제 개수를 입력하세요: "))
    
    with open("settings.txt", "w") as file:
        file.write("Language={}\nCount={}".format(language, count))
    
    print("설정이 변경되었습니다.")

print("□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□")
print("□■■■■■■□□■□□□□■■■■□□□■□□□■■■■■■■□■□□□")
print("□■□□□□□□□■□□□■□□□□■□□■□□□□□□■□□□□■□□□")
print("□■□□□□□□□■□□□■□□□□■□□■□□□□□□■□□□□■□□□")
print("□■□□□□□□□■■■□■□□□□■□□■□□□□□■□■□□□■■■□")
print("□■□□□□□□□■□□□■□□□□■■■■□□□□■□□□■□□■□□□")
print("□■■■■■■■□■□□□■□□□□■□□■□□□■□□□□□■□■□□□")
print("□□□□□□□□□■□□□■□□□□■□□■□□□□□■■■■■■□□□□")
print("□□■□□□□□□□□□□■□□□□■□□■□□□□■□□□□□□■□□□")
print("□□■□□□□□□□□□□□■■■■□□□■□□□□■□□□□□□■□□□")
print("□□■■■■■■■■□□□□□□□□□□□■□□□□□■■■■■■□□□□")
print("□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□□")

print("=" * 74)
print("단어장 프로그램에 오신 것을 환영합니다.")

while True:
    command = int(input("1. 단어장 연습 시작\n2. 단어장 규칙\n3. 단어 추가\n4. 단어 확인\n5. 설정 변경\n6. 종료: "))

    if command == 1:
        print("단어장 연습을 시작합니다.")
        start_practice()

    elif command == 2:
        print("단어장의 규칙입니다.")
        show_rules()

    elif command == 3:
        print("단어를 추가합니다.")
        add_word()

    elif command == 4:
        print("단어를 확인합니다.")
        show_dictionary()

    elif command == 5:
        print("설정을 변경합니다.")
        change_settings()

    elif command == 6:
        print("단어장 프로그램을 이용해주셔서 감사합니다.")
        break

    else:
        print("잘못된 입력입니다.")

# 단어장 딕셔너리 생성
word_dict = {"apple": "사과", "banana": "바나나", "lemon": "레몬", "grape": "포도"}

# 초기 점수 설정
score = 0

# 문제 출제 함수
def quiz():
    global score  # 점수 변수를 전역 변수로 사용
    
    for word, definition in dictionary.items():
        answer = input(f"{definition}은(는) 무엇일까요? ")
        if answer == word:
            score += 1  # 정답이면 점수 1 증가
            
            # 한국어 규칙 함수
def korean_rules():
    print("한국어 규칙을 출력합니다.")

# 일본어 규칙 함수
def japanese_rules():
    print("일본어 규칙을 출력합니다.")

# 영어 규칙 함수
def english_rules():
    print("영어 규칙을 출력합니다.")

# DJ_ptions.Language(x)
def DJ_ptions_Language(x):
    global lang
    if x == 1:
        lang = "한국어"
    elif x == 2:
        lang = "일본어"
    elif x == 3:
        lang = "영어"
    else:
        print("지원하지 않는 언어 옵션입니다.")

# DJ_rule_local(lang)
def DJ_rule_local(lang):
    if lang == "한국어":
        korean_rules()
    elif lang == "일본어":
        japanese_rules()
    elif lang == "영어":
        english_rules()
    else:
        print("지원하지 않는 언어입니다.")

# 문제 출제 실행
quiz()

# 결과 출력
print("점수:", score)

# 목숨 부여 함수
def Life(x):
    global lives
    lives += x

# 문제 출제 실행
Count(5)

# 목숨 부여 실행
Life(2)

# 결과 출력
print("남은 목숨:", lives)
